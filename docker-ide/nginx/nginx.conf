worker_processes auto;

events { worker_connections 1024; }

http {
    sendfile on;

    server {
        listen               443 ssl;
        server_name          your.site.com;
        # Use local resolver which can resolve host name
        resolver             127.0.0.11 valid=10s;
        ssl_certificate      /etc/nginx/nginx-selfsigned.crt;
        ssl_certificate_key  /etc/nginx/nginx-selfsigned.key;
        ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers          HIGH:!aNULL:!MD5;

        error_page           401 = @error401;
        auth_request         /sso-auth;

        # Automatically renew SSO cookie on request
        auth_request_set $cookie $upstream_http_set_cookie;
        add_header Set-Cookie $cookie;

        location /coder/ {
            rewrite            ^/coder/(.*) /$1  break;
            proxy_pass         http://code-server:8080$uri$is_args$args;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection upgrade;
        }

        # Define where to send the user to login and specify how to get back
        location /login {
            auth_request off;
            proxy_pass http://nginx-sso:8082/login;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
        }

        location /logout {
            # Another server{} directive also proxying to http://127.0.0.1:8082
            proxy_pass http://nginx-sso:8082/logout;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
        }

        location /sso-auth {
            # Do not allow requests from outside
            internal;
            # Access /auth endpoint to query login state
            proxy_pass http://nginx-sso:8082/auth;
            # Do not forward the request body (nginx-sso does not care about it)
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            # Set custom information for ACL matching: Each one is available as
            # a field for matching: X-Host = x-host, ...
            proxy_set_header X-Origin-URI $request_uri;
            proxy_set_header X-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Application "kibana";
        }

        # Define where to send the user to login and specify how to get back
        location @error401 {
            auth_request off;
            proxy_pass http://nginx-sso:8082/login?go=$scheme://$http_host$request_uri;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
        }
    }
}